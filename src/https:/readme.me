–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π README.md. –í–æ—Ç –ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è:

```markdown
# Log Inspector üîç

A powerful bash-based log analysis and real-time monitoring tool for system administrators and DevOps engineers.

## Features

- **üìä Time Distribution Analysis** - Group errors by time intervals
- **üî¢ Counting & Statistics** - Quick count of specific events
- **üìÑ Full Text Search** - Find all occurrences with context
- **üëÄ Real-time Monitoring** - Live log tracking with multiple modes
- **üéØ Unique Pattern Detection** - Identify distinct error types

## Installation

```bash
git clone <your-repo-url>
cd log-inspector
chmod +x log_inspector.sh
```

## Quick Start

```bash
# Analyze error distribution over time
./log_inspector.sh time ERROR

# Count specific events (case-insensitive)
./log_inspector.sh count -i warning

# Monitor logs in real-time
./log_inspector.sh check target ERROR
```

## Usage Examples

### Basic Analysis
```bash
# Show when errors occur most frequently
./log_inspector.sh time ERROR

# Count total authentication failures
./log_inspector.sh count "authentication failed"

# Display all database connection issues
./log_inspector.sh all -i "database"
```

### Advanced Monitoring
```bash
# Monitor specific errors in real-time
./log_inspector.sh check target ERROR

# Analyze unique error patterns
./log_inspector.sh check uniq "failed"

# Watch entire log file live
./log_inspector.sh check
```

### Help & Documentation
```bash
# Display full help
./log_inspector.sh --help
```

## Modes Overview

### `time` Mode
Analyzes temporal distribution of events. Shows when specific patterns occur most frequently.

**Output Example:**
```
10:05 | 15 ERROR events
10:06 | 23 ERROR events
10:07 | 8 ERROR events
```

### `count` Mode  
Quick counting of pattern occurrences with case-insensitive option.

### `all` Mode
Displays all matching lines with full context and timestamps.

### `check` Mode - Real-time Monitoring

#### `check target <pattern>`
Monitors log file in real-time, filtering for specific patterns.

#### `check uniq <pattern>`
Shows unique error types and their frequency counts.

#### `check` (no arguments)
Monitors entire log file for complete system visibility.

## Options

- `-i` - Case-insensitive search (applies to time, count, all modes)
- `--help` - Display comprehensive help message

## Log Format Support

Currently supports timestamps in format: `[YYYY-MM-DD HH:MM:SS]`

Example log format:
```
[2023-10-25 14:30:01] ERROR Database connection failed
[2023-10-25 14:30:05] INFO User login successful
```

## Use Cases

### üö® Incident Response
```bash
# Quickly identify error spikes during outages
./log_inspector.sh time ERROR
```

### üîç Debugging
```bash  
# Track specific issue in real-time
./log_inspector.sh check target "NullPointerException"
```

### üìà Trend Analysis
```bash
# Identify recurring unique errors
./log_inspector.sh check uniq "timeout"
```

### üëÅÔ∏è System Monitoring
```bash
# General system health monitoring
./log_inspector.sh check
```

## Project Structure

```
log-inspector/
‚îú‚îÄ‚îÄ log_inspector.sh    # Main script
‚îú‚îÄ‚îÄ example.log         # Sample log file
‚îî‚îÄ‚îÄ README.md          # This file
```

## Contributing

1. Fork the repository
2. Create feature branch (`git checkout -b feature/amazing-feature`)
3. Commit changes (`git commit -m 'Add amazing feature'`)
4. Push to branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## License

This project is licensed under the MIT License - see the LICENSE file for details.

## Future Enhancements

- [ ] Support for multiple log formats
- [ ] Customizable time intervals
- [ ] Alerting integration (email, Slack)
- [ ] JSON output format
- [ ] Docker containerization

---

**Happy log analyzing!** üéØ
```

–≠—Ç–æ—Ç README –≤–∫–ª—é—á–∞–µ—Ç:

‚úÖ **–í—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏** –≤–∞—à–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞  
‚úÖ **–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã** –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è  
‚úÖ **–í–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ** —Å emoji  
‚úÖ **–°—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞**  
‚úÖ **Use cases** –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤  
‚úÖ **–ü–ª–∞–Ω—ã –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é**

–¢–µ–ø–µ—Ä—å –≤–∞—à –ø—Ä–æ–µ–∫—Ç –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç! üöÄ
